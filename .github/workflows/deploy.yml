name: Build, Push Docker & Blue/Green Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: adarshdogra1122/strapi-app
  AWS_REGION: eu-north-1
  FAMILY: strapi-ecs-task

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t $DOCKER_IMAGE:${{ github.sha }} ./strapi
          docker push $DOCKER_IMAGE:${{ github.sha }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -input=false -var="image_tag=${{ github.sha }}" -var-file="terraform.tfvars"

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="image_tag=${{ github.sha }}" -var-file="terraform.tfvars"

      - name: Register new ECS task definition
        run: |
          echo "Registering new task definition for family: $FAMILY"

          TASK_DEF_JSON=$(aws ecs describe-task-definition \
            --task-definition "$FAMILY" \
            --query "taskDefinition" \
            --output json)

          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json "$TASK_DEF_JSON" \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          echo "New task definition ARN: $NEW_TASK_DEF_ARN"
          echo "TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Prepare AppSpec file
        run: |
          sed "s|<TASK_DEFINITION_PLACEHOLDER>|${{ env.TASK_DEF_ARN }}|" appspec.yaml > final-appspec.yaml

      - name: Create CodeDeploy deployment
        run: |
          DEPLOY_CONTENT=$(base64 -w 0 final-appspec.yaml || base64 final-appspec.yaml)

          aws deploy create-deployment \
            --application-name strapi-codedeploy-app \
            --deployment-group-name strapi-deploy-group \
            --revision revisionType=AppSpecContent,appSpecContent="{\"content\":\"$DEPLOY_CONTENT\"}" \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "GitHub Actions Deployment - ${{ github.sha }}"
